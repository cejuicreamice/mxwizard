#!/bin/bash

# Passing flag
function echo_done {
		printf "\e[32mYou are ready to go!\n"
		printf "\033\e[0m"
}

# Procedural installation for each case
function settings() {
		case $1 in
				Utils)
						sudo apt update && sudo apt-get update
						sudo apt-get upgrade -y
						sudo apt-get install build-essential libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6 -y
						sudo apt-get install wget curl xorg-server network-manager figlet -y
						sudo apt-get install xclip pdftk okular kchmviewer -y
						sudo apt install clipit -y
						;;
				LF)
						[[ "$PWD" != "$HOME/Downloads" ]] && cd ~/Downloads
						wget https://github.com/gokcehan/lf/releases/download/r14/lf-linux-amd64.tar.gz \
								-O lf-linux-amd64.tar.gz
						tar xvf lf-linux-amd64.tar.gz
						chmod +x lf
						sudo mv lf /usr/local/bin
						which lf
						sudo apt-get install caca-utils highlight atool w3m poppler-utils mediainfo -y
						;;
				Calcurse)
						sudo apt-get install calcurse -y
						;;
				TeX)
						sudo apt-get install texlive-full -y
						;;
				Julia)
						[[ "$PWD" != "$HOME/Downloads" ]] && cd ~/Downloads
						wget https://julialang-s3.julialang.org/bin/linux/x64/1.4/julia-1.4.1-linux-x86_64.tar.gz
						tar xvfz julia-1.4.1-linux-x86_64.tar.gz
						mv julia-1.4.1 ~
						sudo ln -s ~/julia-1.4.1/bin/julia /usr/local/bin/julia
						;;
				Anaconda)
						sudo wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh -O ~/Downloads/anaconda.sh
						bash ~/Downloads/anaconda.sh -b -p ~/anaconda3
						export PATH=~/anaconda3/bin:$PATH
						#cat ~/.bashrc
						;;
				GatsbyJs)
						curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
						nvm --version
						export NVM_DIR="$HOME/.nvm"
						[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
						[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
						nvm install 10
						nvm use 10
						npm --version
						node --version
						npm install -g gatsby-cli
						#cat ~/.bashrc
						;;
				Nvidia)
						[[ "$PWD" != "$HOME" ]] && cd ~
						su-to-root -c "/usr/local/bin/ddm-mx -i nvidia"
						;;
				i3WM)
						sudo apt install i3 i3blocks suckless-tools dmenu -y
						;;
				SSH-Key)
						echo "Give me your GitHub email: "
						read email
						ssh-keygen -t rsa -C "$email" -b 4096
						ssh -i $PWD/.ssh/id_rsa git@github.com
						xclip -sel clip < ~/.ssh/id_rsa.pub
						notify-send "GitHub SSH Keygen copied to clipboard!"
						;;
				Zsh)
						sudo apt-get install zsh -y
						zsh --version
						cat /etc/shells
						chsh -s $(which zsh)
						;;
				*) ;;
		esac
}

# Just a welcome message
neofetch
echo "$(date) @ $(hostname)"
echo "Hello $USER!"
echo "I am an MX-19 wizard for some post-installation setup."
echo "I will do all the technical work for you, just take a look at the following menu."

# Software menu list display
options=("Utils" "LF" "Calcurse" "TeX" "Julia" "Anaconda"
		"GatsbyJs" "Nvidia" "i3WM" "SSH-Key" "Zsh")
menu() {
    echo "Checklist:"
    for i in ${!options[@]}; do 
        printf "[%s]%3d) %s\n" "${choices[i]:- }" $((i+1)) "${options[i]}"
    done
    if [[ "$msg" ]]; then echo "$msg"; fi
}

# Interactive dialog printing feedback to user
prompt="Tell me to check or uncheck an option. Press <Return> when done: "
while menu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option $num, try again."; continue; }
    ((num--)); msg="I have ${choices[num]:+un}checked ${options[num]}."
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="x"
done
printf "I have checked"; msg=" nothing."
for i in ${!options[@]}; do 
    [[ "${choices[i]}" ]] && { printf " %s" "${options[i]}"; msg=""; }
done
echo "$msg."

# Executing the setup for each option
for i in ${!options[@]}; do
		[[ "${choices[i]}" ]] && settings ${options[i]}
done

# Flag call
echo_done
